@model ChatViewModel
@{
    Layout = "_Layout";
}
    <div class="selected_chat">
        <div class="chat_menu">
            <div class="dropdown button">
                <button class="btn btn-light chat_dropdown_menu" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    <svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-justify" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd" d="M2 12.5a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1h-11a.5.5 0 0 1-.5-.5zm0-3a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1h-11a.5.5 0 0 1-.5-.5zm0-3a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1h-11a.5.5 0 0 1-.5-.5zm0-3a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1h-11a.5.5 0 0 1-.5-.5z" />
                    </svg>
                </button>
                <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                    <form method="post" class="dropdown-item chat_menu_options" onsubmit="deleteChat" asp-controller="Home" asp-action="DeleteChatAsync">
                        <svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-trash trash_icon" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                            <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z" />
                            <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4L4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z" />
                        </svg>
                        <input type="hidden" name="chatId" value="@Model.Id" />
                        <button class="btn btn-light btn-sm submit delete_chat" style="background: transparent; border: transparent;">Delete Chat</button>
                    </form>
                </div>
            </div>
        </div>

        <div id="chat_body" class="chat_body">
            @foreach (var message in Model.Messages)
            {
                @if (message.Type == MessageType.Incoming)
                {
                    <div class="incoming_message_info">
                        <div class="incoming_user_img">
                        </div>
                        <div class="incoming_message">
                            <p class="message_author">
                                <strong>@message.Name</strong>
                            </p>
                            <div class="incoming_message_text">
                                <p>
                                    @message.Text
                                </p>
                                <span class="message_date">@message.Timestamp</span>
                            </div>
                        </div>
                    </div>
                }
                else if (message.Type == MessageType.Default)
                {
                    <div class="default_message_info">
                        <div class="default_message_text">
                            <p>
                                @message.Text
                            </p>
                            <span class="message_date">@message.Timestamp</span>
                        </div>
                    </div>
                }
                else
                {
                    <div class="outgoing_message_info">
                        <div class="outgoing_message_text">
                            <p>
                                @message.Text
                            </p>
                            <span class="message_date">@message.Timestamp</span>
                        </div>
                    </div>
                }
            }
        </div>


        <div class="input_message_area">
            <form class="chat_input" onsubmit="sendMessage(event)" asp-controller="Home" asp-action="CreateMessageAsync">
                <input type="hidden" name="groupId" value="@Model.Id" />
                <input type="hidden" name="groupName" value="@Model.Name" />
                <textarea class="form-control message_input" type="text" name="message" id="message-input" placeholder="Type a message here..." required style="resize:none; height:auto"></textarea>
                <button type="submit" class="btn btn-light submit">Send</button>
            </form>
        </div>
    </div>


<script src="~/js/signalr.min.js"></script>
<script src="https://unpkg.com/axios/dist/axios.min.js"></script>
<script src="~/js/site.js"></script>
<script src="~/lib/jquery/dist/jquery.js"></script>


<script>

    document.getElementById(@Model.Id).classList.add('active')


    window.onload = function () {
        window.scrollBy(0, window.innerHeight);
        document.getElementById('chat_body').scrollBy(0, window.innerHeight);
    }

    var connection = new signalR.HubConnectionBuilder().withUrl("/chatHub")
        .withAutomaticReconnect()
        .build();
   
    var _connectionId = '';

    connection.on("ReceiveMessage", function (data, connectionId, groupId) {

        if (connectionId == _connectionId) {

            var messageInfo = document.createElement("div");
            messageInfo.classList.add("outgoing_message_info");

            var messageText = document.createElement("div");
            messageText.classList.add("outgoing_message_text");

            var p = document.createElement("p");
            p.appendChild(document.createTextNode(data.text));

            var message_date = document.createElement("span");
            message_date.classList.add("message_date");
            message_date.appendChild(document.createTextNode(data.timestamp));

            messageInfo.appendChild(messageText);
            messageText.appendChild(p);
            messageText.appendChild(message_date);

            document.querySelector('.chat_body').append(messageInfo);
            
        }

        else {
            var messageInfo = document.createElement("div");
            messageInfo.classList.add("incoming_message_info");

            var userImg = document.createElement("div");
            userImg.classList.add("incoming_user_img");

            var message = document.createElement("div");
            message.classList.add("incoming_message");

            var messageAuthor = document.createElement("p");
            var strong = document.createElement("strong");
            messageAuthor.classList.add("message_author");
            messageAuthor.appendChild(strong);
            strong.appendChild(document.createTextNode(data.name));
            

            var messageText = document.createElement("div");
            messageText.classList.add("incoming_message_text");

            var p = document.createElement("p");
            p.appendChild(document.createTextNode(data.text));

            var message_date = document.createElement("span");
            message_date.classList.add("message_date");
            message_date.appendChild(document.createTextNode(data.timestamp));

            messageInfo.appendChild(userImg);
            messageInfo.appendChild(message);
            message.appendChild(messageAuthor);
            message.appendChild(messageText);
            messageText.appendChild(p);
            messageText.appendChild(message_date);

            document.querySelector('.chat_body').append(messageInfo);
            console.log("incoming message: ", data.text);
        }
        window.scrollBy(0, window.innerHeight);
        document.getElementById('chat_body').scrollBy(0, window.innerHeight);
    })

    

    var joinGroup = function () {
        const bodyForm = new FormData();
        bodyForm.set('connectionId', _connectionId);
        bodyForm.append('groupName', '@Model.Name');

        axios.post('/Chat/JoinChatAsync', bodyForm)
            .then(res => {
                console.log("Group joined!", res);
            })
            .catch(err => {
                console.log("Failed to join this group", err);
            })
    }


    connection.start().catch(err => console.log(err))
        .then(function () {
            connection.invoke('GetConnectionId')
                .then(function (connectionId) {
                    _connectionId = connectionId
                    console.log('connect to chatHub');
                    console.log(_connectionId);
                    joinGroup();
                })
        })
        .catch(function (err) {
            console.log(err)
        })

    connection.serverTimeoutInMilliseconds = 1000 * 60 * 10;

    var sendMessage = function (event) {
        event.preventDefault();

        var data = new FormData(event.target);

        document.getElementById('message-input').value = '';
        data.append("connectionId", _connectionId);

        axios.post('/Chat/SendMessageAsync', data)
            .then(res => {
                console.log("Message Sent");
            })
            .catch(err => {
                console.log("Failed to send message");
            })

    }

    var deleteChat = function (event) {
        event.preventDefault();

        var data = new FormData(event.target);

        axios.delete('/Home/DeleteChatAsync', data)
            .then(res => {
                console.log("Chat has been deleted");
            })
            //.then(function () { window.location = "/Home/Index" })
            .catch(err => {
                console.log("Failed to delete chat");
            })

    }
</script>