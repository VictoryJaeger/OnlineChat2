@model ChatViewModel
@{
    Layout = "_Layout";
}


<div class="chat_body">
    @foreach (var message in Model.Messages)
    {
        @if (message.Type == MessageType.Incoming)
        {
            <div class="incoming_message_info">
                <div class="incoming_user_img">  </div>
                <div class="incoming_message">
                    <div class="incoming_message_text">
                        <p>
                            @message.Text
                        </p>
                        <span class="message_date">@message.Timestamp@*.ToString("hh:mm | d MMM")*@</span>
                    </div>
                </div>
            </div>
        }
        else if (message.Type == MessageType.Default)
        {
            <div class="default_message_info">
                <div class="default_message_text">
                    <p>
                        @message.Text
                    </p>
                    <span class="message_date">@message.Timestamp@*.ToString("hh:mm | d MMM")*@</span>
                </div>
            </div>
        }
        else
        {
            <div class="outgoing_message_info">
                <div class="outgoing_message_text">
                    <p>
                        @message.Text
                    </p>
                    <span class="message_date">@message.Timestamp@*.ToString("hh:mm | d MMM")*@</span>
                </div>
            </div>
        }
    }
</div>



<div class="input_message_area">
    <form class="chat_input" onsubmit="sendMessage(event)" asp-controller="Home" asp-action="CreateMessageAsync">
        <input type="hidden" name="groupId" value="@Model.Id" />
        <input type="hidden" name="groupName" value="@Model.Name" />
        <input class="text" type="text" name="message" id="message-input" placeholder="Type a message here..." required />
        @*<button type="submit">Send</button>*@
        <button type="submit" class="btn btn-light submit">Send</button>
    </form>
</div>


<script src="~/js/signalr.min.js"></script>
<script src="https://unpkg.com/axios/dist/axios.min.js"></script>
<script src="~/js/site.js"></script>


@*@section scripts{*@
@*<script src="wwwroot/js/signalr/dist/browser/signalr.js"></script>*@



<script>

    var connection = new signalR.HubConnectionBuilder().withUrl("/chatHub")
        .withAutomaticReconnect()
        .build();
    //var homeConnection = new signalR.HubConnectionBuilder().withUrl("/homeHub")
    //    .withAutomaticReconnect()
    //    .build();

    //connection.invoke('GetConnectionId')
    //    .then(function (connectionId) {
    //        _connectionId = connectionId
    //        joinGroup();
    //    });


    var _connectionId = '';
   // var _homeConnectionId = '';

    connection.on("ReceiveMessage", function (data, connectionId, groupId) {
        console.log(data);

        ///debugger;
        if (connectionId == _connectionId) {

            var messageInfo = document.createElement("div");
            messageInfo.classList.add("outgoing_message_info");

            var messageText = document.createElement("div");
            messageText.classList.add("outgoing_message_text");

            var p = document.createElement("p");
            p.appendChild(document.createTextNode(data.text));

            var message_date = document.createElement("span");
            message_date.classList.add("message_date");
            message_date.appendChild(document.createTextNode(data.timestamp));

            messageInfo.appendChild(messageText);
            messageText.appendChild(p);
            messageText.appendChild(message_date);

            document.querySelector('.chat_body').append(messageInfo);
        }

        else {
            var messageInfo = document.createElement("div");
            messageInfo.classList.add("incoming_message_info");

            var userImg = document.createElement("div");
            userImg.classList.add("incoming_user_img");

            var message = document.createElement("div");
            message.classList.add("incoming_message");

            var messageText = document.createElement("div");
            messageText.classList.add("incoming_message_text");

            var p = document.createElement("p");
            p.appendChild(document.createTextNode(data.text));

            var message_date = document.createElement("span");
            message_date.classList.add("message_date");
            message_date.appendChild(document.createTextNode(data.timestamp));

            messageInfo.appendChild(userImg);
            messageInfo.appendChild(message);
            message.appendChild(messageText);
            messageText.appendChild(p);
            messageText.appendChild(message_date);

            document.querySelector('.chat_body').append(messageInfo);
            console.log("incoming message: ", data.text);
        }

        //var currentChat = document.getElementById(groupId);
        //var lastMessage = currentChat.querySelector(".lastMessage");
        //lastMessage.innerHTML = data.name + " : " + data.text;
        //document.getElementById("last_message_in_chat").innerHTML = data.name + " : " + data.text;
    })

    

    var joinGroup = function () {
        // var url = 'Chat/JoinChatAsync/' + _connectionId + '/@Model.Name'
        const bodyForm = new FormData();
        bodyForm.set('connectionId', _connectionId);
        bodyForm.append('groupName', '@Model.Name');

        axios.post('Chat/JoinChatAsync', bodyForm)
        //axios.post(url,null)
            .then(res => {
                console.log("Group joined!", res);
            })
            .catch(err => {
                console.log("Failed to join this group", err);
            })
    }



    //connection.onclose(function () {
    //    console.log('connecition closed');
    //});

    //connection.onclose(async () => {
    //    debugger;
    //    console.log("need reconnect");
    //});

    //$.signalR.connectionState
    //Object { connecting: 0, connected: 1, reconnecting: 2, disconnected: 4 }

    connection.start().catch(err => console.log(err))
        .then(function () {
            connection.invoke('GetConnectionId')
                .then(function (connectionId) {
                    _connectionId = connectionId
                    console.log('connect to chatHub');
                    console.log(_connectionId);
                    joinGroup();
                })
        })
        .catch(function (err) {
            console.log(err)
        })

    //homeConnection.start().catch(err => console.log(err))
    //    .then(function () {
    //        homeConnection.invoke('GetConnectionId')
    //            .then(function (homeConnectionId) {
    //                _homeConnectionId = homeConnectionId
    //                console.log('connect to homeHub');
    //                console.log(_homeConnectionId);
    //                //joinGroup();
    //            })
    //    })

    connection.serverTimeoutInMilliseconds = 1000 * 60 * 10;

    //homeConnection.serverTimeoutInMilliseconds = 1000 * 60 * 10;


    var sendMessage = function (event) {
        event.preventDefault();

        var data = new FormData(event.target);

        document.getElementById('message-input').value = '';
        data.append("connectionId", _connectionId);

        axios.post('Chat/SendMessageAsync', data)
            .then(res => {
                console.log("Message Sent");
            })
            .catch(err => {
                console.log("Failed to send message");
            })

    }
</script>
@*}*@






@*//async function start() {
    //    try {
    //        await connection.start();
    //        console.log("connected");
    //    } catch (err) {
    //        console.log(err);
    //        settimeout(() => start(), 5000);
    //    }
    //};*@




@*<div class="chat-body">


        @foreach (var message in Model.Messages)
        {
            <div class="message">
                <header>@message.Name:</header>
                <p>@message.Text</p>
                <footer>@message.Timestamp</footer>
            </div>
        }

    </div>*@
@*<form class="chat-input" onsubmit="sendMessage(event)" asp-controller="Home" asp-action="CreateMessageAsync">
        <input type="hidden" name="groupId" value="@Model.Id" />
        <input type="text" name="message" id="message-input" />
        <button type="submit">Send</button>

    </form>*@






@*//var messageInfo = document.createElement("div");
    //messageInfo.classList.add("message_info");

    //var userImg = document.createElement("div");
    //userImg.classList.add("user_img");

    //var message = document.createElement("div");
    //message.classList.add("message");

    //messageInfo.appendChild(userImg);
    //messageInfo.appendChild(message);

    //var messageText = document.createElement("div");
    //messageText.classList.add("message_text");



    //message.appendChild(messageText);
    //messageText.appendChild(p);
    //message.appendChild(message_date);*@


@*@message.Timestamp.Hour:@message.Timestamp.Minute|@message.Timestamp. @message.Timestamp.Day*@

@*<img src="https://ptetutorials.com/images/user-profile.png" alt="sunil">*@

@*<div class="message">
        <header>@message.Name:</header>
        <p>@message.Text</p>
        <footer>@message.Timestamp</footer>
    </div>*@