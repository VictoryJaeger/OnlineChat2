@inject SignalROnlineChatServer.BLL.Services.Interfaces.IHomeService homeService
@{
    var chats = homeService.GetAllChats();
    var activeUserName = homeService.GetActiveUserName();
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - SignalROnlineChatServer</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" />

</head>
<body>
    <div class="container">
        <main role="main" class="pb-3">

            <div class="messaging">
                <div class="navbar menu">
                    <div class="navbar-brand">
                        <div class="dropdown button">
                            <button class="btn btn-secondary" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                <svg class="menu_lines_icon" width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-justify lg" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                                    <path fill-rule="evenodd" d="M2 12.5a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1h-11a.5.5 0 0 1-.5-.5zm0-3a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1h-11a.5.5 0 0 1-.5-.5zm0-3a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1h-11a.5.5 0 0 1-.5-.5zm0-3a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1h-11a.5.5 0 0 1-.5-.5z" />
                                </svg>
                            </button>
                            <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                                <a class="dropdown-item" asp-controller="Home" asp-action="FindUsers">Find Users</a>
                                <a class="dropdown-item" asp-controller="Home" asp-action="DisplayCreateGroupForm">Create new group</a>
                            </div>
                        </div>
                        <div class="chat_app_name">
                            SignalROnlineChat
                        </div>
                    </div>
                    <div class="active_user_name">
                        <p>@activeUserName</p>
                    </div>
                    <div class="logout-button">
                        <a class="nav-link text-dark" asp-area="" asp-controller="Account" asp-action="LogoutAsync">
                            <svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-door-open-fill logout_icon" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                                <path fill-rule="evenodd" d="M1.5 15a.5.5 0 0 0 0 1h13a.5.5 0 0 0 0-1H13V2.5A1.5 1.5 0 0 0 11.5 1H11V.5a.5.5 0 0 0-.57-.495l-7 1A.5.5 0 0 0 3 1.5V15H1.5zM11 2v13h1V2.5a.5.5 0 0 0-.5-.5H11zm-2.5 8c-.276 0-.5-.448-.5-1s.224-1 .5-1 .5.448.5 1-.224 1-.5 1z" />
                            </svg>
                        </a>
                    </div>

                </div>
                <div class="inbox_msg">
                    <div class="inbox_people">
                        <div class="inbox_chats">
                            @foreach (var chat in chats)
                            {
                                <a class="get_chat_button" asp-controller="Home" asp-action="GetChat" asp-route-id="@chat.Id">
                                    <div id="@chat.Id" class="chat_list_item">
                                        <div class="chat_detail">
                                            <div class="chat_img"></div>
                                            <div class="chat_detail_info">
                                                <h5>@chat.Name<span class="chat_date">@chat.LastMessageDate</span></h5>
                                                <p class="lastMessage" id="last_message_in_chat">
                                                    @chat.LastMessageAuthor : @chat.LastMessage
                                                </p>
                                            </div>
                                            @if (chat.UnreadMessages > 0)
                                            {
                                                <span class="badge badge-light notification">@chat.UnreadMessages.ToString()</span>
                                            }
                                            else
                                            {
                                                <span class="badge badge-light notification" style="visibility: hidden">@chat.UnreadMessages.ToString()</span>
                                            }
                                        </div>
                                    </div>
                                </a>
                            }
                        </div>
                    </div>
                    <div class="chat_view">
                        <div class="message_story">
                            @RenderBody()
                        </div>
                    </div>
                </div>
            </div>
        </main>
    </div>



    <script src="~/js/signalr.js"></script>
    <script src="~/lib/jquery/dist/jquery.min.js"></script>

    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
</body>

@RenderSection("Scripts", required: false)

</html>
<ej-script-manager></ej-script-manager>



<script src="~/js/signalr.min.js"></script>
<script src="https://unpkg.com/axios/dist/axios.min.js"></script>

<script type="text/javascript">    

    $(".notification").bind("DOMSubtreeModified", function () {
        var elem = $(".notification");
        elem.each(function () {
            var innerText = $(this).contents().filter(function () {
                return this.nodeType == Node.TEXT_NODE;
            }).text();

            var count = parseInt(innerText);

            if (count > 0) {
                $(this).css("visibility", "visible");
            }
            else {
                $(this).css("visibility", "hidden");
            }
        });
    })

</script>

<script>
        const homeConnection = new signalR.HubConnectionBuilder().withUrl("/homeHub")
            .withAutomaticReconnect()
            .build();

        var _connectionId = '';

        homeConnection.serverTimeoutInMilliseconds = 1000 * 60 * 10;

        homeConnection.start().catch(err => console.log(err))
            .then(function () {
                homeConnection.invoke('GetConnectionId')
                    .then(function (connectionId) {
                        _connectionId = connectionId
                        console.log("connected to homeHub with id " + _connectionId);
                    })
            })
            .catch(function (err) {
                console.log(err)
            })



        homeConnection.on("ChatCreated", function (data) {
            console.log(data);

            console.log('start display data');


            var getChatButton = document.createElement("a");
            getChatButton.class = "get_chat_button"

            getChatButton.href = '@Url.Action("GetChat", "Home")?id=' + data.id;

            var chatListItem = document.createElement("div");
            chatListItem.classList.add("chat_list_item");
            chatListItem.id = data.id;

            var chatDetail = document.createElement("div");
            chatDetail.classList.add("chat_detail");

            var chatImg = document.createElement("div");
            chatImg.classList.add("chat_img");

            var chatDetailInfo = document.createElement("div");
            chatDetailInfo.classList.add("chat_detail_info");

            var chatName = document.createElement("h5");
            chatName.appendChild(document.createTextNode(data.name));

            var chatDate = document.createElement("span");
            chatDate.classList.add("chat_date");
            chatDate.appendChild(document.createTextNode(data.lastMessageDate));

            var p = document.createElement("p");
            p.classList.add("lastMessage");
            p.appendChild(document.createTextNode(data.lastMessageAuthor + ' : ' + data.lastMessage));

            var notification = document.createElement("span");
            notification.classList.add("badge");
            notification.classList.add("badge-light");
            notification.classList.add("notification");
            notification.appendChild(document.createTextNode("1"));

            getChatButton.appendChild(chatListItem);

            chatListItem.appendChild(chatDetail);

            chatDetail.appendChild(chatImg);
            chatDetail.appendChild(chatDetailInfo);
            chatDetail.appendChild(notification);
            chatDetailInfo.appendChild(chatName);
            chatDetailInfo.appendChild(p);
            chatName.appendChild(chatDate);

            getChatButton.appendChild(chatListItem);
            var inboxChat = document.querySelector(".inbox_chats");
            inboxChat.insertBefore(getChatButton, inboxChat.firstChild);
        })

    homeConnection.on("UpdateLastMessage", function (data, groupId) {
            var currentChat = document.getElementById(groupId);
            var lastMessage = currentChat.querySelector(".lastMessage");
            lastMessage.innerHTML = data.name + " : " + data.text;

            var chatPointer = currentChat.parentNode;
            var inboxChat = chatPointer.parentNode;
            inboxChat.insertBefore(chatPointer, inboxChat.firstChild);
        });

    homeConnection.on("PushNotification", function (groupId)
    {
        var currentChat = document.getElementById(groupId);
        var notification = currentChat.querySelector(".badge");
        var count = parseInt(notification.innerHTML);
        notification.innerHTML = count + 1;
    });

    homeConnection.on("ClearNotification", function (groupId)
    {
        var currentChat = document.getElementById(groupId);
        var notification = currentChat.querySelector(".badge");
        notification.innerHTML = 0;
    });

    homeConnection.on("DeleteChat", function (chatId)
    {
        var currentChat = document.getElementById(chatId);
        var chatPointer = currentChat.parentNode;
        var inboxChat = chatPointer.parentNode;
        inboxChat.removeChild(chatPointer);
    });


</script>